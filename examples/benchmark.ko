-- Benchmark for factorial computation
-- This will test recursive function calls with more intensive computation

-- Recursive factorial function (same as in factorial.ko)
func pub factorial { n : number ! } [
    -- Base case: 0! and 1! are both 1
    if { $n <= 1 } [
        1
    ] else [
        -- Recursive case: n! = n * (n-1)!
        $n * call { factorial, $n - 1 }
    ]
]

-- Main function as entry point
func pub main {} [
    -- Print header
    print { 'Factorial Benchmark' }
    print { '-----------------' }

    -- Calculate various factorials as a benchmark
    print { 'factorial(1) = ', call { factorial, 1 } }
    print { 'factorial(5) = ', call { factorial, 5 } }
    print { 'factorial(10) = ', call { factorial, 10 } }
    print { 'factorial(12) = ', call { factorial, 12 } }
    print { 'factorial(15) = ', call { factorial, 15 } }

    -- More intensive calculation - calculate factorial(20) 1000 times
    print { '\nRunning intensive calculation...' }
    count : 0
    target : 500000

    -- Simple accumulation loop
    total : 0
    while { $count < $target } [
        f20 : call { factorial, 20 }
        total : $total + $f20
        count : $count + 1
    ]

    -- Print final result
    print { 'Completed ', $target, ' calculations of factorial(20)' }
    print { 'Sum of results: ', $total }

    'ok'  -- Return value using the 'ok' syntax
]
